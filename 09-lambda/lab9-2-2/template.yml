AWSTemplateFormatVersion: 2010-09-09
Description: 'Creates log resources for Stelligent-U Topic 8: Lab 9.2.1'
Parameters: 
  LogGroupName:
    Description: 'The name of the log group'
    Type: String
    Default: ''
  LogBucketName:
    Description: 'The name of the log group'
    Type: String
    Default: ''
  DataBucketName:
    Description: 'The name of the log group'
    Type: String
    Default: ''
  DDBTableName:
    Description: 'The name of the log group'
    Type: String
    Default: 'bgar-log-data'
Resources: 
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: source
          AttributeType: S
        - AttributeName: region
          AttributeType: S 
      KeySchema:
        - AttributeName: source
          KeyType: HASH
        - AttributeName: region
          KeyType: RANGE
      TableName: !Ref DDBTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '9.1'
        - Key: stelligent-u-lab
          Value: '9.1.2'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 60
      LogGroupName: !Ref LogGroupName
  LogBucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: LogDeliveryWrite
      BucketName: !Ref LogBucketName
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '9.2'
        - Key: stelligent-u-lab
          Value: '9.2.1'
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref DataBucketName
        S3Key: code.zip
      Description: bgar-stelu-lab9-1-1
      FunctionName: bgar-stelu-lab9-1-1
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIamRole.Arn
  TrailBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !Sub 'arn:aws:s3:::${LogBucketName}'
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub 'arn:aws:s3:::${LogBucketName}/logs/*'
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "CloudTrailPut"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "logs:CreateLogStream"
                Resource: "*"
              - Effect: "Allow"
                Action: "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "SNSPut"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sns:*"
                Resource: "*"
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: TrailBucketPolicy
    Properties:
      S3BucketName: !Ref LogBucket
      CloudWatchLogsLogGroupArn: !GetAtt LogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt LogRole.Arn
      IncludeGlobalServiceEvents: false
      IsLogging: true
      S3KeyPrefix: logs
      EventSelectors: 
        - DataResources:
            - Type: AWS::S3::Object
              Values: 
                - !Sub arn:aws:s3:::${DataBucketName}/
          IncludeManagementEvents: false
          ReadWriteType: All
  S3PutTrigger:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName: 
            - PutObject
        requestParameters:
          bucketName: 
            - !Ref DataBucketName
      State: ENABLED
      Targets:
      - Arn: !GetAtt LambdaFunction.Arn
        Id: ddb_logger
  EventsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref LambdaFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt S3PutTrigger.Arn
Outputs:
  LogBucket:
    Description: The log bucket
    Value: !Ref LogBucket
  DataBucket:
    Description: The data bucket
    Value: !Ref DataBucketName
  LogGroup:
    Description: The log group
    Value: !Ref LogGroup