AWSTemplateFormatVersion: 2010-09-09
Description: 'Creates log resources for Stelligent-U Topic 8: Lab 9.2.1'
Parameters: 
  DataBucketName:
    Description: 'The name of the data bucket'
    Type: String
    Default: ''
  DDBTableName:
    Description: 'The name of the dynamodb table'
    Type: String
    Default: 'bgar-log-data'
Resources: 
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: event_source
          AttributeType: S
        - AttributeName: event_region
          AttributeType: S
      KeySchema:
        - AttributeName: event_source
          KeyType: HASH
        - AttributeName: event_region
          KeyType: RANGE
      TableName: !Ref DDBTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '9.1'
        - Key: stelligent-u-lab
          Value: '9.1.2'
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: AllowBasicLambda
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:*
              Resource: "*"
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.conditions import Key

          def lambda_handler(event, context):

              data = json.loads(event["body"])

              dynamodb = boto3.resource('dynamodb')

              table = dynamodb.Table('bgar-log-data')

              print(f"Getting item with filter: {data}")

              response = table.query(
                  KeyConditionExpression=Key('event_source').eq(data["event_source"]))["Items"]

              response = {'statusCode': 200,
              'body': json.dumps(response)}

              return response

      Description: bgar-stelu-lab9-2-3
      FunctionName: bgar-stelu-lab9-2-3
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIamRole.Arn
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":", !Ref ApiGatewayRestApi, "/*"]]
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: bgar-restapi-lab911
      Description: Test API for bgar-lab-911
      FailOnWarnings: true
  ApiGatewayLogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLogRole.Arn
  ApiGatewayStage:
    DependsOn: ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref ApiGatewayDeployment
      MethodSettings: 
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          ResourcePath: "/*"
      RestApiId: !Ref ApiGatewayRestApi
      StageName: "LATEST"
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '9.1'
        - Key: stelligent-u-lab
          Value: '9.1.1'
  ApiGatewayMethod:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join ["", ["arn:aws:apigateway:", !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LambdaFunction.Arn, "/invocations"]]
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      MethodResponses:
        - StatusCode: 200
  ApiGatewayDeployment:
    DependsOn: ApiGatewayMethod
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref ApiGatewayRestApi
      StageName: TestStage
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: test
      RestApiId: !Ref ApiGatewayRestApi
Outputs:
  DataBucket:
    Description: The data bucket
    Value: !Ref DataBucketName