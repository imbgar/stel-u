AWSTemplateFormatVersion: 2010-09-09
Description: 'Creates lambda resources for Stelligent-U Topic 9: Lab 9-1-2'
Resources: 
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: movie_id
          AttributeType: S
        - AttributeName: genre
          AttributeType: S 
      KeySchema:
        - AttributeName: movie_id
          KeyType: HASH
        - AttributeName: genre
          KeyType: RANGE
      TableName: bgar-Movies
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '9.1'
        - Key: stelligent-u-lab
          Value: '9.1.2'
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowBasicLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: "arn:aws:logs:us-east-1:324320755747:*"
              - Effect: Allow
                Action: 
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:us-east-1:324320755747:log-group:/aws/lambda/bgar-lab-9-1-1-manual:*
              - Effect: Allow
                Action: 
                  - dynamodb:*
                Resource: "*"
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):

              data = json.loads(event["body"])

              dynamodb = boto3.resource('dynamodb')

              table = dynamodb.Table('bgar-Movies')

              print(f"Writing item with: {data}")
              response = table.put_item(
                  Item={
                      'movie_id': data["movie_id"],
                      'genre': data["genre"],
                      'rating': data["rating"]
                  }
              )

              response = {'statusCode': 200,
              'body': json.dumps(response)}

              return response
      Description: bgar-stelu-lab9-1-1
      FunctionName: bgar-stelu-lab9-1-1
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIamRole.Arn
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":", !Ref ApiGatewayRestApi, "/*"]]
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: bgar-restapi-lab911
      Description: Test API for bgar-lab-911
      FailOnWarnings: true
  ApiGatewayLogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLogRole.Arn
  ApiGatewayStage:
    DependsOn: ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref ApiGatewayDeployment
      MethodSettings: 
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          ResourcePath: "/*"
      RestApiId: !Ref ApiGatewayRestApi
      StageName: "LATEST"
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '9.1'
        - Key: stelligent-u-lab
          Value: '9.1.1'
  ApiGatewayMethod:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join ["", ["arn:aws:apigateway:", !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LambdaFunction.Arn, "/invocations"]]
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      MethodResponses:
        - StatusCode: 200
  ApiGatewayDeployment:
    DependsOn: ApiGatewayMethod
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref ApiGatewayRestApi
      StageName: TestStage
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: test
      RestApiId: !Ref ApiGatewayRestApi
Outputs:
  ApiGatewayRestApi:
    Description: The RestAPI
    Value: !Ref ApiGatewayRestApi
  ApiGatewayResource:
    Description: The api gateway resource
    Value: !Ref ApiGatewayResource
  ApiGatewayLogRole:
    Description: The api gateway log role
    Value: !Ref ApiGatewayLogRole
  LambdaFunction:
    Description: The lambda function
    Value: !Ref LambdaFunction
  LambdaIamRole:
    Description: The lambda function execution role
    Value: !Ref LambdaIamRole