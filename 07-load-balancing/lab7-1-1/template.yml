AWSTemplateFormatVersion: '2010-09-09'
Parameters:
    LatestAmazonLinux2AmiId:
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
        Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    EC2KeyPairName:
      Description: 'Key pair to be used for the instance'
      Type: String
      Default: ''
    LoadBalancerSSLCert:
      Description: 'The certificate arn to use for https listener'
      Type: String
      Default: ''
Resources:
  WebServerAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !ImportValue bgar-lab-subnet-id
        - !ImportValue bgar-lab-subnet2-id
      DesiredCapacity: '2'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 30 
      LaunchConfigurationName: !Ref WebServersLaunchConfig
      MaxSize: '3'
      MinSize: '1'
      TargetGroupARNs:
        - !Ref WebTargetGroup
  WebServersLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref LatestAmazonLinux2AmiId
      InstanceType: 't2.medium'
      KeyName: !Ref EC2KeyPairName
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData: 
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource WebServersLaunchConfig \
              --configsets All \
              --region ${AWS::Region}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource WebServersLaunchConfig \
              --region ${AWS::Region}
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureStelligentProject
        ConfigureStelligentProject:
          commands:
            install_nginx: 
              command: "amazon-linux-extras install nginx1.12"
              cwd: "~"
          files:
            /usr/share/nginx/html/index.html:
              content: '<p>Automation for the People</p>'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: bgar-stelu-l-512
      GroupDescription: 'bgar stelu sg'
      VpcId: !ImportValue bgar-lab-vpc-id
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 24.32.231.81/32
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIp: 10.0.0.0/16
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 24.32.231.81/32
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '7.1'
        - Key: stelligent-u-lab
          Value: '7.1.1'
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /index.html
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '7.1'
        - Key: stelligent-u-lab
          Value: '7.1.1'
      VpcId: !ImportValue bgar-lab-vpc-id
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      SecurityGroups: 
        - !Ref EC2SecurityGroup
      Subnets: 
        - !ImportValue bgar-lab-subnet-id
        - !ImportValue bgar-lab-subnet2-id
      Tags: 
        - Key: user
          Value: brandon.garcia.labs
        - Key: stelligent-u-lesson
          Value: '7.1'
        - Key: stelligent-u-lab
          Value: '7.1.1'
  WebLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 80
      Protocol: HTTP
  SecureWebLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates:
        - CertificateArn: !Ref LoadBalancerSSLCert
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: 'ELBSecurityPolicy-FS-2018-06'
